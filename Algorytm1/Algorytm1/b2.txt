//using System;
//using System.Linq;

namespace AlgorytmGenetyczny
{

    class Specimen
    {
        public static int chromLen;
        public static double minVal, maxVal;
        public string x1 { get; }
        public string x2 { get; }
        public string specimen { get; }

        public double x1Val { get; set; }
        public double x2Val { get; set; }
        
        public double? ocena { get; set; }
        

        public Specimen(string x1, string x2)
        {
            this.x1 = x1;
            this.x2 = x2;
            specimen = x1 + x2;
            x1Val = decode(x1);
            x2Val = decode(x2);
            ocena = null;
        }
        
        private double decode(string x)
        {
            double ZD = maxVal - minVal;
            double ctmp = 0;
            string codeRev = new string(x.Reverse().ToArray());

            if (x.All(c => c == '0')) {return minVal;}
            if (x.All(c => c == '1')) {return maxVal;}
            
            for (int i = 0; i < x.Length; i++)
            {
                if (codeRev[i] != '0')
                {
                    ctmp += Math.Pow(2, i);
                }
            }
            return Math.Round(minVal + ctmp/(Math.Pow(2, x.Length) - 1) * ZD, 2);
        }

        public void showStatics()
        {
            Console.WriteLine($"{minVal}, {maxVal}, {chromLen}");
        }
        
        public void showSpecimen()
        {
            Console.WriteLine($"{specimen}\t{x1} | {x2}  = {x1Val,6:F2} | {x2Val,6:F2}\tocena: {ocena,5:F2}");
        }
    }
    
    
    class Program
    {
        static List<Specimen> initializePopulation(int liczbaosobnikow, int LBnP)
        {
            List<Specimen> population = new List<Specimen>();
            Random random = new Random();
            
            for (int i = 0; i < liczbaosobnikow; i++)
            {
                string x1 = "", x2 = "";
                
                for (int j = 0; j < LBnP; j++)
                {
                    string chrom1 = Convert.ToString(random.Next(0, 2));
                    x1 += chrom1;
                    string chrom2 = Convert.ToString(random.Next(0, 2));
                    x2 += chrom2;
                }
                Specimen specimen = new Specimen(x1, x2);
                population.Add(specimen);
            }
            return  population;
        }

        static void showPopulation(List<Specimen> population)
        {
            foreach (var specimen in population)
            {
                specimen.showSpecimen();
            }
        }

        static void evaluatePopulation(List<Specimen> population)
        {
            foreach (var specimen in population)
            {
                if (specimen.ocena == null)
                {
                    specimen.ocena = Math.Sin(specimen.x1Val * 0.05) + Math.Sin(specimen.x2Val * 0.05) +
                                    0.4 * Math.Sin(specimen.x1Val * 0.15) * Math.Sin(specimen.x2Val * 0.15);
                }
            }

        }
        
        
        static void Main(string[] args)
        {
            int LBnP = 3;
            int liczbaParam = 2;
            int dlugoscOsobnika = LBnP * liczbaParam;
            int liczbaOsobnikow = 9;
            int liczbaIteracji = 20;
            double xMin = 0, xMax = 100;
            Specimen.chromLen = dlugoscOsobnika;
            Specimen.minVal = xMin;
            Specimen.maxVal = xMax;
            List<Specimen> populacja = initializePopulation(liczbaOsobnikow, LBnP);
            populacja.Add(new Specimen("010", "010"));
            evaluatePopulation(populacja);
            showPopulation(populacja);
            populacja[3].showStatics();
        }
    }
}

